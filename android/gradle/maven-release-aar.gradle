apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'signing'

ext["GROUP_ID"] = 'com.microsoft'
ext["ARTIFACT_ID"] = "quickauth"
ext["VERSION_CODE"] = 2
ext["VERSION_NAME"] = "0.1.0"
ext["LIB_VERSION"] = "v0.1"
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = project.hasProperty('GPGSigningKeyID') ? "$GPGSigningKeyID" : ''
    ext["signing.password"] = project.hasProperty('GPGSigningPassword') ? "$GPGSigningPassword" : ''
    ext["signing.secretKeyRingFile"] = project.hasProperty('SigningSecretKeyRingFile') ? "$SigningSecretKeyRingFile" : ''
}

// Task to generate javadoc.jar
task javadocJar(type: Jar) {
    from reporting.file("$project.buildDir/outputs/jar/javadoc/")

    classifier 'javadoc'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

publishing {
    publications {
        quickauth(MavenPublication) {
            groupId = GROUP_ID
            artifactId = ARTIFACT_ID
            version = VERSION_NAME

            pom {
                name = ARTIFACT_ID
                description = 'Quick Auth Android SDK.'
                url = rootProject.ext.github_url
                licenses {
                    license {
                        name = rootProject.ext.license_type
                        url = rootProject.ext.license_url
                    }
                }
                developers {
                    developer {
                        id = rootProject.ext.developer_id
                        name = rootProject.ext.developer_name
                        email = rootProject.ext.developer_email
                    }
                }
                scm {
                    connection = rootProject.ext.scm_connection
                    developerConnection = rootProject.ext.scm_dev_connection
                    url = rootProject.ext.scm_url
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/outputs/aar/quickauth-${VERSION_NAME}.aar")
        }

    }
    repositories {
        maven {
            name = "local"
            url rootProject.buildDir.path + '/artifacts'
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "$name $version API"
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst {
            classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
        }
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding("UTF-8")
        failOnError false
        destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
    }
}

afterEvaluate {
    assemble.dependsOn generatereleaseJavadoc, sourcesJar, javadocJar
}

if (!secretPropsFile.exists()) {
    signing {
        sign publishing.publications
    }
}

