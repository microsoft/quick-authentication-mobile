apply plugin: 'maven-publish'
apply plugin: 'pmd'

ext["GROUP_ID"] = 'com.microsoft'
ext["ARTIFACT_ID"] = "quickauth"
ext["VERSION_CODE"] = 1
ext["VERSION_NAME"] = "1.0.0"

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

// Task to generate javadoc
task("generateQuickAuthJavadoc", type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding("UTF-8")

    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

// Task to generate javadoc.jar
task javadocJar(type: Jar, dependsOn: generateQuickAuthJavadoc) {
    from generateQuickAuthJavadoc.destinationDir

    classifier 'javadoc'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

publishing {
    publications {
        quickauth(MavenPublication) {
            groupId = GROUP_ID
            artifactId = ARTIFACT_ID
            version = VERSION_NAME

            pom {
                name = ARTIFACT_ID
                description = 'Quick auth sdk.'
                url = 'https://github.com/microsoft/quick-authentication-mobile'
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                developers {
                    developer {
                        id = "microsoft"
                        name = "Microsoft"
                    }
                }
                scm {
                    connection = 'scm:git:github.com/microsoft/quick-authentication-mobile.git'
                    developerConnection = 'scm:git:ssh://github.com/microsoft/quick-authentication-mobile.git'
                    url = 'https://github.com/microsoft/quick-authentication-mobile/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/outputs/aar/quickauth-${VERSION_NAME}.aar")
        }

    }
    repositories {
        maven {
            url '/home/jingjinggu/develop/microsoft/quick-authentication/demos/android-demo/aar'
            name 'QuickAuth'
//            authentication {
//                basic(BasicAuthentication)
//            }
//            credentials {
//                username repoUsername
//                password repoUserToken
//            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('assemble')) {
//        task.dependsOn 'pmd'
    }
    if (task.name.contains('assemble')
            && !task.name.contains('Snapshot')
            && !task.name.contains('Test')
            && !task.name.contains('Local')) {
//        task.dependsOn 'javadocJar', 'sourcesJar'
//        task.dependsOn 'sourcesJar'
    }
}

